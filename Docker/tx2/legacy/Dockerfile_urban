FROM nvcr.io/nvidia/l4t-base:r32.2

# setup timezone & install packages
ENV DEBIAN_FRONTEND=noninteractive
RUN echo 'Etc/UTC' > /etc/timezone && \
    ln -s /usr/share/zoneinfo/Etc/UTC /etc/localtime && \
    apt-get update && \
    apt-get install -q -y tzdata dirmngr gnupg2 python-pip && \
    apt-get install -y --no-install-recommends make g++ && \
    apt-get install -y libusb-1.0 gtk+-3.0 build-essential libglfw3-dev && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# setup keys and source.list
RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654 && \
    echo "deb http://packages.ros.org/ros/ubuntu bionic main" > /etc/apt/sources.list.d/ros1-latest.list

# install bootstrap tools
RUN apt-get update && apt-get install --no-install-recommends -y \
    python-rosdep \
    python3-pip \
    python-pip  \
    python-rosinstall \
    python-vcstools \
    python3-opencv  \
    python3-scipy   \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# setup environment
ENV SHELL=/bin/bash \
	NB_USER=argsubt \
	NB_UID=1000 \
	LANG=en_US.UTF-8 \
	LANGUAGE=en_US.UTF-8

ENV HOME=/home/${NB_USER}

RUN adduser --disabled-password \
	--gecos "Default user" \
	--uid ${NB_UID} \
	${NB_USER}

RUN echo "root:root" | chpasswd
RUN echo "${NB_USER}:arg" | chpasswd

# bootstrap rosdep
RUN rosdep init \
    && rosdep update

# install ros packages
ENV ROS_DISTRO melodic
RUN apt-get update && apt-get install -y \ 
    ros-${ROS_DISTRO}-desktop \
    ros-${ROS_DISTRO}-perception \
    ros-${ROS_DISTRO}-rgbd-launch \
    ros-melodic-joystick-drivers \
    ros-melodic-pointcloud-to-laserscan \
    ros-melodic-robot-localization \
    ros-melodic-cartographer-ros \
    ros-melodic-cartographer-rviz \
    ros-melodic-spacenav-node \
    ros-melodic-geodesy \
    ros-melodic-serial \
    ros-melodic-controller-manager \
    ros-melodic-openslam-gmapping \
    ros-melodic-tf2-sensor-msgs \
    ros-melodic-twist-mux \
    ros-melodic-ddynamic-reconfigure \
    python-scipy \
    python-gobject \
    python-gtk2 \
    libcanberra-gtk-module \
    libcanberra-gtk3-module \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# setup entrypoint
COPY ./ros_entrypoint.sh /

##################################### PIP ######################################

RUN pip2 install --upgrade pip setuptools
RUN pip3 install --upgrade pip setuptools

RUN pip install \
    Pillow \
    pandas \
    pypozyx \
    gdown 

RUN pip3 install \
    numpy \
    rospkg \
    catkin-tools    \
    cython \
    pandas \
    image

RUN pip3 install --upgrade numpy
RUN python3 -m pip install empy

#################################### Pytorch ####################################
WORKDIR /tmp
RUN wget https://nvidia.box.com/shared/static/phqe92v26cbhqjohwtvxorrwnmrnfx1o.whl -O torch-1.3.0-cp36-cp36m-linux_aarch64.whl && \
    pip3 install torch-1.3.0-cp36-cp36m-linux_aarch64.whl torchvision && \
    rm -rf  torch-1.3.0-cp36-cp36m-linux_aarch64.whl 

RUN wget https://nvidia.box.com/shared/static/6t52xry4x2i634h1cfqvc9oaoqfzrcnq.whl -O torch-1.3.0-cp27-cp27mu-linux_aarch64.whl && \
    pip2 install torch-1.3.0-cp27-cp27mu-linux_aarch64.whl torchvision && \
    rm -rf torch-1.3.0-cp27-cp27mu-linux_aarch64.whl 

#################################### GTSAM ####################################

RUN cd ${HOME}/ \
 && git clone https://github.com/borglab/gtsam.git \
 && cd gtsam/ \
 && mkdir build \
 && cd build \
 && cmake .. \
 && make install

#################################### ISAM ####################################

RUN cd ${HOME}/ \
 && git clone https://github.com/ori-drs/isam \
 && cd isam/ \
 && make \
 && make install

COPY ./FindCholmod.cmake /usr/share/cmake-3.10/Modules
COPY ./FindiSAM.cmake /usr/share/cmake-3.10/Modules

#################################  LCM  ########################################
RUN cd ${HOME} && git clone https://github.com/lcm-proj/lcm \
 && cd lcm \
 && mkdir build \
 && cd build \
 && cmake .. \
 && make install

RUN cd ${HOME} && git clone http://github.com/huangjuite/procman \
 && cd procman \
 && mkdir build \
 && cd build \
 && cmake .. \
 && make install

# set the version of the realsense library
ENV LIBREALSENSE_VERSION 2.24.0
RUN wget https://github.com/IntelRealSense/librealsense/archive/v${LIBREALSENSE_VERSION}.tar.gz && \
    tar -xvzf v${LIBREALSENSE_VERSION}.tar.gz && \
    rm v${LIBREALSENSE_VERSION}.tar.gz && \
    mkdir -p librealsense-${LIBREALSENSE_VERSION}/build && \
    cd librealsense-${LIBREALSENSE_VERSION}/build && \
    cmake .. && \
    make && \
    make install && \
    rm -rf librealsense-${LIBREALSENSE_VERSION}


RUN apt-get update && apt-get install -y \
    ros-melodic-gazebo-ros \
    libmove-base-msgs-dev \
    libpcap-dev \    
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*


RUN chown -R ${NB_USER}:${NB_USER} ${HOME}/
RUN echo "argsubt ALL=(ALL)  ALL" >> /etc/sudoers

ENTRYPOINT ["/ros_entrypoint.sh"]
USER ${NB_USER}
WORKDIR ${HOME}
CMD ["bash"]
